import {StatePersistentProcessor} from "../processors/StatePersistentProcessor";
import {Action} from "../../api/Action";


export class CommonPhrasesProcessor extends StatePersistentProcessor {

    getActionType(): string {
        return "COMMON_PHRASES";
    }

    getActions(): Action[] {
        return [new Action(["–†–∞–¥–æ–≤–∞—Ç—å –ü–∞—Ä—Ç–∏—è! –ü–ª—é—Å —Ä–µ–π—Ç–∏–Ω–≥",
            "üëç", "‚ù§Ô∏è"], 5)];
    }

    keyPhrases(): string[] {
        return [
            "—Å–ø–∞—Å–∏–±–æ",
            "—Å–ø–∞—Å–∏–±",
            "–∞—Ö–∞—Ö–∞—Ö–∞",
            "–∞—Ö–∞—Ö–∞",
            "–∞—Ö–∞—Ö",
        ];
    }

    protected shouldNotifyWhenReplyMessageNull(): boolean {
        return false;
    }

    useReplyToMessage(): boolean {
        return true;
    }
}

export class OffensivePhrasesProcessor extends StatePersistentProcessor {

    getActionType(): string {
        return "OFFENSIVE_PHRASES";
    }

    getActions(): Action[] {
        return [new Action([
            "–ù–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ! –ú–∏–Ω—É—Å —Ä–∏—Å!", "–¢–≤–æ—è –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å!"], -10)];
    }

    keyPhrases(): string[] {
        return [
            "–≤–∏–Ω–Ω–∏ –ø—É—Ö",
            "–≤–∏–Ω–∏ –ø—É—Ö",
            "—á–µ—Ä—Ç–æ–≤ –∫–∏—Ç–∞–π",
            "–≥—Ä—è–∑–Ω—ã–µ –∫–∏—Ç–∞–π—Ü—ã",
            "—á–µ—Ä—Ç–æ–≤–∞ –ø–∞—Ä—Ç–∏—è",
        ];
    }

    protected shouldNotifyWhenReplyMessageNull(): boolean {
        return false;
    }

    useReplyToMessage(): boolean {
        return true;
    }
}

export class MinusRiseProcessor extends StatePersistentProcessor {

    getActionType(): string {
        return "MINUS_RISE";
    }

    getActions(): Action[] {
        return [new Action([
            "–ö–æ–º—É ?",
            "–ö–æ–º—É ? –ö–æ–º—É ?"])];
    }

    keyPhrases(): string[] {
        return [
            "–º–∏–Ω—É—Å —Ä–∏—Å",
        ];
    }

    protected shouldNotifyWhenReplyMessageNull(): boolean {
        return false;
    }

    useReplyToMessage(): boolean {
        return true;
    }
}

export class TaiwanProcessor extends StatePersistentProcessor {

    getActionType(): string {
        return "TAIWAN";
    }

    getActions(): Action[] {
        return [
            new Action(["–¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–∞–π–≤–∞–Ω—å !?"]),
            new Action(["–¢–∞–π–≤–∞–Ω—å –µ—Å—Ç—å –ö–∏—Ç–∞–π! –ö–∏—Ç–∞–π –µ—Å—Ç—å –¢–∞–π–≤–∞–Ω—å! –ú–∏–Ω—É—Å —Ä–∏—Å!"], -10),
        ];
    }

    keyPhrases(): string[] {
        return [
            "—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–∞–π–≤–∞–Ω—å",
            "—Ç–∞–π–≤–∞–Ω—å –Ω–µ –∫–∏—Ç–∞–π",
            "—Ç–∞–π–≤–∞–Ω—å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∏—Ç–∞—é",
        ];
    }

    protected shouldNotifyWhenReplyMessageNull(): boolean {
        return false;
    }

    useReplyToMessage(): boolean {
        return true;
    }
}
